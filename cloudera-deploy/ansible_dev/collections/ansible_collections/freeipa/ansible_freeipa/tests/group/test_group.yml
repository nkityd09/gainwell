---
- name: Test group
  hosts: "{{ ipa_test_host | default('ipaserver') }}"
  become: true
  gather_facts: false

  tasks:
  # setup
  - include_tasks: ../env_freeipa_facts.yml

  # GET DOMAIN AND REALM

  - name: Get Domain from server name
    set_fact:
      ipaserver_domain: "{{ ansible_facts['fqdn'].split('.')[1:] | join ('.') }}"
    when: ipaserver_domain is not defined

  - name: Get Realm from server name
    set_fact:
      ipaserver_realm: "{{ ansible_facts['fqdn'].split('.')[1:] | join ('.') | upper }}"
    when: ipaserver_realm is not defined

  # CLEANUP TEST ITEMS

  - name: Ensure users user1, user2 and user3 are absent
    freeipa.ansible_freeipa.ipauser:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: user1,user2,user3
      state: absent

  - name: Ensure group group3, group2 and group1 are absent
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group3,group2,group1
      state: absent

  # CREATE TEST ITEMS

  - name: Ensure users user1..user3 are present
    freeipa.ansible_freeipa.ipauser:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      users:
      - name: user1
        first: user1
        last: Last
      - name: user2
        first: user2
        last: Last
      - name: user3
        first: user3
        last: Last
    register: result
    failed_when: not result.changed or result.failed

  # TESTS

  - name: Ensure group1 is present
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group1 is present again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure group2 is present
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group2
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group2 is present again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group2
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure group3 is present
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group3
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group3 is present again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group3
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure groups group2 and group3 are present in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      group:
      - group2
      - group3
      action: member
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure groups group2 and group3 are present in group group1 again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      group:
      - group2
      - group3
      action: member
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure group3 ia present in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      group:
      - group3
      action: member
    register: result
    failed_when: result.changed or result.failed

    # service

  - block:

    - name: Ensure service "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is present in group group1
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
      register: result
      failed_when: not result.changed or result.failed

    - name: Ensure service "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is present in group group1, again
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
      register: result
      failed_when: result.changed or result.failed

    - name: Ensure service "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is present in group group1
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
      register: result
      failed_when: not result.changed or result.failed

    - name: Ensure service "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is present in group group1, again
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
      register: result
      failed_when: result.changed or result.failed

    - name: Ensure service "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is absent in group group1
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
        state: absent
      register: result
      failed_when: not result.changed or result.failed

    - name: Ensure service "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is absent in group group1, again
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
        state: absent
      register: result
      failed_when: result.changed or result.failed

    - name: Ensure service "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is absent in group group1
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
        state: absent
      register: result
      failed_when: not result.changed or result.failed

    - name: Ensure service "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}" is absent in group group1, again
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
        state: absent
      register: result
      failed_when: result.changed or result.failed

    - name: Ensure services are present in group group1
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
      register: result
      failed_when: not result.changed or result.failed

    - name: Ensure services are present in group group1, again
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'http/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
      register: result
      failed_when: result.changed or result.failed

    - name: Ensure services are absent in group group1
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        - "{{ 'LDAP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
        state: absent
      register: result
      failed_when: not result.changed or result.failed

    - name: Ensure services are absent in group group1, again
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: SomeADMINpassword
        ipaapi_context: "{{ ipa_context | default(omit) }}"
        name: group1
        service:
        - "{{ 'HTTP/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        - "{{ 'ldap/ipaserver.' + ipaserver_domain + '@' + ipaserver_realm }}"
        action: member
        state: absent
      register: result
      failed_when: result.changed or result.failed

    when: ipa_version is version('4.7.0', '>=')

    # user

  - name: Ensure users user1, user2 and user3 are present in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      - user3
      action: member
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure users user1, user2 and user3 are present in group group1 again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      - user3
      action: member
    register: result
    failed_when: result.changed or result.failed

  #- ipagroup:
  #    ipaadmin_password: SomeADMINpassword
  #    ipaapi_context: "{{ ipa_context | default(omit) }}"
  #    name: group1
  #    user:
  #    - user7
  #    action: member

  - name: Ensure user user7 is absent in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user7
      action: member
      state: absent
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure group group4 is absent
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group4
      state: absent
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure groups group3, group2, and group1 are absent
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group3,group2,group1
      state: absent
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group group1 is present
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure users user1, user2 are present in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      action: member
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure users user1, user2 and user3 are present in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      - user3
      action: member
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure users user1, user2 are present in group group1, again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      action: member
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure users user1, user2 and user3 are present in group group1, again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      - user3
      action: member
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure group group1 is absent
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      state: absent
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group group1 with users user1, user2 is present
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group group1 with users user1, user2 and user3 is present
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      - user3
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure group group1 with users user1, user2 and user3 is present, again
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
      - user3
      action: member
    register: result
    failed_when: result.changed or result.failed

  - name: Ensure only users user1, user2 are present in group group1
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group1
      user:
      - user1
      - user2
    register: result
    failed_when: not result.changed or result.failed

  # CLEANUP TEST ITEMS

  - name: Ensure group group3, group2 and group1 are absent
    freeipa.ansible_freeipa.ipagroup:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: group3,group2,group1
      state: absent
    register: result
    failed_when: not result.changed or result.failed

  - name: Ensure users user1, user2 and user3 are absent
    freeipa.ansible_freeipa.ipauser:
      ipaadmin_password: SomeADMINpassword
      ipaapi_context: "{{ ipa_context | default(omit) }}"
      name: user1,user2,user3
      state: absent
    register: result
    failed_when: not result.changed or result.failed
